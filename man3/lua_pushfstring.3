.TH "liblua" "3" "Jan 25, 2016" "5.1.5" "lua API documentation"
.SH NAME
lua_pushfstring - liblua API documentation

.SH PROPERTIES
[-0, +1, \fBm\fP]
.SH SYNOPSIS
const char *lua_pushfstring (lua_State *L, const char *fmt, ...);

.SH DESCRIPTION

.sp
Pushes onto the stack a formatted string
and returns a pointer to this string.
It is similar to the C function \fBsprintf\fP,
but has some important differences:

.TP

You do not have to allocate space for the result:
the result is a Lua string and Lua takes care of memory allocation
(and deallocation, through garbage collection).

.TP

The conversion specifiers are quite restricted.
There are no flags, widths, or precisions.
The conversion specifiers can only be
'\fB%%\fP' (inserts a '\fB%\fP' in the string),
'\fB%s\fP' (inserts a zero-terminated string, with no size restrictions),
'\fB%f\fP' (inserts a \fBlua_Number\fP),
'\fB%p\fP' (inserts a pointer as a hexadecimal numeral),
'\fB%d\fP' (inserts an \fBint\fP), and
'\fB%c\fP' (inserts an \fBint\fP as a character).

.PP