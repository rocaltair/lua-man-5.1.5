.TH "liblua" "3" "Jan 25, 2016" "5.1.5" "lua API documentation"
.SH NAME
luaL_Buffer - liblua API documentation

.SH SYNOPSIS
typedef struct luaL_Buffer luaL_Buffer;

.SH DESCRIPTION

.sp
Type for a \fBstring buffer\fP.

.sp
A string buffer allows C code to build Lua strings piecemeal.
Its pattern of use is as follows:

.TP
First you declare a variable \fBb\fP of type \fBluaL_Buffer\fP.
.TP
Then you initialize it with a call \fBluaL_buffinit(L, &b)\fP.
.TP
Then you add string pieces to the buffer calling any of
the \fBluaL_add*\fP functions.
.TP
You finish by calling \fBluaL_pushresult(&b)\fP.
This call leaves the final string on the top of the stack.

.PP

.sp
During its normal operation,
a string buffer uses a variable number of stack slots.
So, while using a buffer, you cannot assume that you know where
the top of the stack is.
You can use the stack between successive calls to buffer operations
as long as that use is balanced;
that is,
when you call a buffer operation,
the stack is at the same level
it was immediately after the previous buffer operation.
(The only exception to this rule is \fBluaL_addvalue\fP.)
After calling \fBluaL_pushresult\fP the stack is back to its
level when the buffer was initialized,
plus the final string on its top.