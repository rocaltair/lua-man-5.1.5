.TH "liblua" "3" "Jan 25, 2016" "5.1.5" "lua API documentation"
.SH NAME
lua_sethook - liblua API documentation

.SH PROPERTIES
[-0, +0, \fB-\fP]
.SH SYNOPSIS
int lua_sethook (lua_State *L, lua_Hook f, int mask, int count);

.SH DESCRIPTION

.sp
Sets the debugging hook function.

.sp
Argument \fBf\fP is the hook function.
\fBmask\fP specifies on which events the hook will be called:
it is formed by a bitwise or of the constants
\fBLUA_MASKCALL\fP,
\fBLUA_MASKRET\fP,
\fBLUA_MASKLINE\fP,
and \fBLUA_MASKCOUNT\fP.
The \fBcount\fP argument is only meaningful when the mask
includes \fBLUA_MASKCOUNT\fP.
For each event, the hook is called as explained below:

.TP
\fBThe call hook:\fP is called when the interpreter calls a function.
The hook is called just after Lua enters the new function,
before the function gets its arguments.

.TP
\fBThe return hook:\fP is called when the interpreter returns from a function.
The hook is called just before Lua leaves the function.
You have no access to the values to be returned by the function.

.TP
\fBThe line hook:\fP is called when the interpreter is about to
start the execution of a new line of code,
or when it jumps back in the code (even to the same line).
(This event only happens while Lua is executing a Lua function.)

.TP
\fBThe count hook:\fP is called after the interpreter executes every
\fBcount\fP instructions.
(This event only happens while Lua is executing a Lua function.)

.PP

.sp
A hook is disabled by setting \fBmask\fP to zero.